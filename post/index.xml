<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shivam Barsaley</title>
    <link>http://www.barsaley.com/post/index.xml</link>
    <description>Recent content in Posts on Shivam Barsaley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 11 Jun 2017 03:05:20 +0530</lastBuildDate>
    <atom:link href="http://www.barsaley.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sequelize The Legendary Way</title>
      <link>http://www.barsaley.com/post/Sequelize_The_Legendary_Way/</link>
      <pubDate>Sun, 11 Jun 2017 03:05:20 +0530</pubDate>
      
      <guid>http://www.barsaley.com/post/Sequelize_The_Legendary_Way/</guid>
      <description>

&lt;p&gt;In this post, Lets build an awesome todo app for our legendary comic Heroes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.barsaley.com/images/sequelize_101/avengers_ganganam.gif&#34; style=&#34;width:50%;display:block; margin:0 auto&#34; alt=&#34;here we go again&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-is-sequelize&#34;&gt;What is Sequelize:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sequelize/sequelize&#34;&gt;&lt;strong&gt;Sequelize&lt;/strong&gt;&lt;/a&gt; is a promise-based ORM for Node.js and io.js. It supports the dialects PostgreSQL, MySQL, MariaDB, SQLite and MSSQL and features solid transaction support, relations, read replication and more.&lt;/p&gt;

&lt;h3 id=&#34;0-okay-so-here-we-roll&#34;&gt;0. Okay, So here we roll:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.barsaley.com/images/memes/Lets_get_started.gif&#34; style=&#34;width:40%;display:block; margin:0 auto&#34; alt=&#34;here we go again&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Over the course of the post, we would be working around to create the application available &lt;a href=&#34;https://github.com/shivambarsaley/Sequelize_101&#34;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;. You could browse through the commits to understand each step.&lt;/p&gt;

&lt;h4 id=&#34;0-1-setting-things-up&#34;&gt;0.1 Setting things up:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repo: &lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/shivambarsaley/Sequelize_101.git 
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;#TODO Switch to branch &lt;strong&gt;starting_points&lt;/strong&gt;, master branch contains the completed app. &lt;code style=&#34;color: blue; background: &#34;&gt;git checkout starting_points&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Install all node dependencies &lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;npm install
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Create the database &lt;strong&gt;todo_dev&lt;/strong&gt;, in your mysql client: &lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;schema&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;todo_dev;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Running the migrations&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;node_modules/.bin/sequelize db:migrate 
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Post this, You will be having a schema like:
&lt;img src=&#34;http://www.barsaley.com/images/sequelize_101/DB_Schema.png&#34; style=&#34;width:50%;display:block; margin:0 auto&#34; alt=&#34;here we go again&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-migrations-and-seeders&#34;&gt;1. Migrations and Seeders:&lt;/h3&gt;

&lt;p&gt;Sequelize comes in with a very well build in support for migrations, These are basically managed via the &lt;a href=&#34;https://github.com/sequelize/cli&#34;&gt;sequelize-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be installed via npm as
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save sequelize-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;1-1-creating-new-migrations&#34;&gt;1.1 Creating New Migrations:&lt;/h4&gt;

&lt;p&gt;Lets create a new migration to add an ending date to our todo&amp;rsquo;s, using the sequelize-cli we have&lt;br /&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ node_modules/.bin/sequelize migration:create --name&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;Adding_End_date_to_Todo
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This would create new migration at &lt;code style=&#34;color: blue; background: lightgray&#34;&gt;/server/migrations&lt;/code&gt;
&lt;br /&gt;
Lets update this migration file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 20170406200830-Adding_End_date_to_Todo.js
&#39;use strict&#39;;

module.exports = {
  up: function (queryInterface, Sequelize) {
    
    return queryInterface.addColumn(&#39;Todos&#39;, &#39;endDate&#39;,
      {
        type: Sequelize.DATE,
        allowNull: true,
      }
    );
  },

  down: function (queryInterface, Sequelize) {
    
    return queryInterface.removeColumn(&#39;Todos&#39;, &#39;endDate&#39;);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And execute the migrate command
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ node_modules/.bin/sequelize db:migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Okay Now that we have the basic structure up, Lets on-board some users, Luckily &lt;a href=&#34;http://marvel.wikia.com/wiki/Steven_Rogers_(Earth-616)&#34;&gt;Steven Rogers&lt;/a&gt; and &lt;a href=&#34;http://marvel.wikia.com/wiki/Bruce_Banner_(Earth-616)&#34;&gt;Bruce Banner&lt;/a&gt; has signed up to be our early users.
&lt;img src=&#34;http://www.barsaley.com/images/memes/hell_yeah.gif&#34; style=&#34;width:60%;display:block; margin:0 auto&#34; alt=&#34;here we go again&#34;/&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-2-lets-add-some-seed-data&#34;&gt;1.2 Lets Add some Seed Data:&lt;/h4&gt;

&lt;p&gt;Just like migrations, we can create some seeders to populate the Database. Lets start by adding some categories&lt;/p&gt;

&lt;p&gt;To create a seed file:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ node_modules/.bin/sequelize seed:create --name&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;Adding_Basic_Categories  
&lt;/pre&gt;&lt;/div&gt;

This would create new migration at &lt;code&gt;/server/seeders/&lt;/code&gt;&lt;br /&gt;
Lets seed some data&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 20170406202530-Adding_Basic_Categories.js
&#39;use strict&#39;;

module.exports = {
  up: function (queryInterface, Sequelize) {
    
    return queryInterface.bulkInsert(&#39;Categories&#39;, [
      {
        id: 1,
        name: &#39;Work&#39;,
        createdAt: Sequelize.fn(&#39;NOW&#39;),
        updatedAt: Sequelize.fn(&#39;NOW&#39;)
      },
      {
        id: 2,
        name: &#39;Personal&#39;,
        createdAt: Sequelize.fn(&#39;NOW&#39;),
        updatedAt: Sequelize.fn(&#39;NOW&#39;)
      },
      {
        id: 3,
        name: &#39;Avenge&#39;,
        createdAt: Sequelize.fn(&#39;NOW&#39;),
        updatedAt: Sequelize.fn(&#39;NOW&#39;)
      },
    ], {});
  },

  down: function (queryInterface, Sequelize) {
    
    return queryInterface.bulkDelete(&#39;Categories&#39;, null, {});
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the seeder task
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;node_modules/.bin/sequelize db:seed:all&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;There are couple of more seeders we have for app available &lt;a href=&#34;URL to seeder folders&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike migrations, Sequelize does not keep track of the seeders it has run by default, We specifically updated our config to achieve this. Our config now looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# config/config.js

module.exports = {
  &amp;quot;development&amp;quot;: {
    &amp;quot;username&amp;quot;: &amp;quot;root&amp;quot;,
    &amp;quot;password&amp;quot;: null,
    &amp;quot;database&amp;quot;: &amp;quot;todo_dev&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
    &amp;quot;dialect&amp;quot;: &amp;quot;mysql&amp;quot;,
    &amp;quot;seederStorage&amp;quot;: &amp;quot;sequelize&amp;quot;
  }...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key &lt;code&gt;seederStorage&lt;/code&gt; does this for us, So now we are storing it in a table called &lt;strong&gt;SequelizeData&lt;/strong&gt;. We could also have saved it as a json, more on it &lt;a href=&#34;https://github.com/sequelize/cli#seed&#34;&gt;here&lt;/a&gt;.&lt;br /&gt;
Unfortunately there isn&amp;rsquo;t much documentation on seeders.&lt;br /&gt;
&lt;img src=&#34;http://www.barsaley.com/images/memes/sad.gif&#34; style=&#34;width:40%;display:block; margin:0 auto&#34; alt=&#34;here we go again&#34;/&gt;
You could follow the ongoing discussions &lt;a href=&#34;https://github.com/sequelize/cli/issues/225&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;3-querying&#34;&gt;3. Querying:&lt;/h3&gt;

&lt;p&gt;Since most of the queries around simple CRUD operations are covered in the introductory tutorials, I ll just leave the samples below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#server/src/todo.js  

&#39;use strict&#39;;
const Model = require(&#39;../models/index&#39;);

const getTodosForUser = (userId, includeTasks = true) =&amp;gt; {
  const options = {
    where: {userId},
    include: [Model.Task]
  };
  if(!includeTasks){
    delete options.include;
  }
  return Model.Todo.findAll(options);
};

const addTodo = (UserId, CategoryId, todoName) =&amp;gt; {

  return Model.Todo.create({UserId, CategoryId, name:todoName});
};

const markAsComplete = (id) =&amp;gt; {

  return Model.Todo.update({isCompleted: true}, {where:{id}});
};

const deleteTodo = (id) =&amp;gt; {

  return Model.Todo.destroy({where:{id}})
};


module.exports = {getTodosForUser, addTodo,markAsComplete, deleteTodo};

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-1-associations&#34;&gt;3.1 Associations:&lt;/h4&gt;

&lt;p&gt;Bruce being a avid user, Needs to get more grained data about his todo. Lets get on to it, can&amp;rsquo;t risk him getting &lt;a href=&#34;http://gph.is/1PuzniV&#34;&gt;angry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He wants us to find all his todo&amp;rsquo;s with just the incomplete tasks, This could be achieved easily by updating the include clause, Lets add a new method to the todo helper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const getAllTodoWithIncompleteTasksOnly = (UserId) =&amp;gt; {

  return Model.Todo.findAll({
    where: {UserId},
    include:[{model: Model.Task, where:{isCompleted: false}}]
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should execute the SQL query with an ON clause to just return the incomplete tasks only, Something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT `Todo`.`id`, `Todo`.`name`, `Todo`.`isCompleted`, `Todo`.`createdAt`, `Todo`.`updatedAt`, `Todo`.`UserId`, `Todo`.`CategoryId`, `Tasks`.`id` AS `Tasks.id`, `Tasks`.`name` AS `Tasks.name`, `Tasks`.`isCompleted` AS `Tasks.isCompleted`, `Tasks`.`createdAt` AS `Tasks.createdAt`, `Tasks`.`updatedAt` AS `Tasks.updatedAt`, `Tasks`.`TodoId` AS `Tasks.TodoId` FROM `Todos` AS `Todo` INNER JOIN `Tasks` AS `Tasks` ON `Todo`.`id` = `Tasks`.`TodoId` AND `Tasks`.`isCompleted` = false WHERE `Todo`.`UserId` = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could similarly update the include clause to just select some columns say name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include:[{model: Model.Task, where:{isCompleted: false}}, attributes:[&#39;name&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to exclude a particular column&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include:[{model: Model.Task, where:{isCompleted: false}, attributes: {exclude:[&#39;isCompleted&#39;]}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/XSc4Kkc5u2WZy/giphy.gif&#34; style=&#34;width:60%;display:block; margin:0 auto&#34; alt=&#34;Hulk Happy&#34;/&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-2-raw-queries&#34;&gt;3.2 Raw Queries:&lt;/h4&gt;

&lt;p&gt;Often there is a need to run already prepared SQL queries, which can be achieved using the sequelize.query function.&lt;/p&gt;

&lt;p&gt;So to run a query&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select * from Categories
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#server/src/category.js

const getAllCategoriesRaw = () =&amp;gt; {

  Model.sequelize.query(&#39;Select * from Categories&#39;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this would return something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ [ RowDataPacket {
      id: 1,
      name: &#39;Work&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z },
    RowDataPacket {
      id: 2,
      name: &#39;Personal&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z },
    RowDataPacket {
      id: 3,
      name: &#39;HitList&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z } ],
  [ RowDataPacket {
      id: 1,
      name: &#39;Work&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z },
    RowDataPacket {
      id: 2,
      name: &#39;Personal&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z },
    RowDataPacket {
      id: 3,
      name: &#39;HitList&#39;,
      createdAt: 2017-04-16T20:29:02.000Z,
      updatedAt: 2017-04-16T20:29:02.000Z } ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure of response is basically [result, metaData], Now metaData is dialect dependent, and in case of MySQL the response is basically two references to the same result object.&lt;/p&gt;

&lt;p&gt;We could get rid of the metadata, by passing the query type. This basically tells sequelize about how to format the result. This could be done as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Model.sequelize.query(&#39;Select * from Categories&#39;, {type: Model.sequelize.QueryTypes.SELECT});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also provide dynamic parameters (stuff to be replaced during query generation) to the raw query, There are two ways to do it&lt;/p&gt;

&lt;h5 id=&#34;as-an-array&#34;&gt;As an array:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;#server/src/category.js

const getAllCategoriesReplacementsUsingArray = () =&amp;gt; {

  Model.sequelize.query(&#39;Select * from Categories where id &amp;gt; ? and id &amp;lt; ?&#39;,
  {replacements:[1,4], type: Model.sequelize.QueryTypes.SELECT});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sequelize replaces the ? with the array elements in the order in which they occur.&lt;/p&gt;

&lt;h5 id=&#34;as-reference-object&#34;&gt;As reference object&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;const getAllCategoriesReplacementsUsingObject = () =&amp;gt; {

  Model.sequelize.query(&#39;Select * from Categories where id &amp;gt; :floorLimit and id &amp;lt; :ceilLimit&#39;,
  {replacements:{floorLimit: 1, ceilLimit:4}, type: Model.sequelize.QueryTypes.SELECT});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both of these would generate the same query as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Select * from Categories where id &amp;gt; 1 and id &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;stored-procedures&#34;&gt;Stored Procedures:&lt;/h5&gt;

&lt;p&gt;Since raw queries provide an interface to write direct SQL queries, We could use it to call Stored Procedures, For an example, We have a very minimalistic Stored Proc at &lt;code&gt;/storedProcs&lt;/code&gt; called &lt;code&gt;GetAllProducts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could use it, as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Model.sequelize.query(&#39;Call GetAllProducts(:id)&#39;, {replacements:{id:1}})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-tiny-little-things&#34;&gt;3.3 Tiny Little things:&lt;/h4&gt;

&lt;h4 id=&#34;3-3-1-raw-true&#34;&gt;3.3.1 raw: true&lt;/h4&gt;

&lt;p&gt;Sequelize always returns an instance object of the result, This basically includes functions to perform further operations over the result object.
At times, We are not in need for any further operations over the result and only need to read/display.&lt;/p&gt;

&lt;p&gt;This flag comes in handy for such cases, It reduces all the overhead sequelize does after fetching.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Model.Todo.findById(1, {raw:true})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would give out a result as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ id: 1,
  name: &#39;Investigate&#39;,
  isCompleted: 0,
  createdAt: 2017-04-16T20:29:02.000Z,
  updatedAt: 2017-04-16T20:29:02.000Z,
  UserId: 1,
  CategoryId: 1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-2-nested-keys&#34;&gt;3.3.2 Nested Keys&lt;/h4&gt;

&lt;p&gt;Lets start by adding a new Todo and lets not add any tasks for it.
Now we need to count all the todos which don&amp;rsquo;t have any tasks.This would require accessing a column from the included Tasks table.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Model.Todo.count({include:[{model:Model.Task,required:false}],raw:true,where:{&amp;quot;$Tasks.TodoId$&amp;quot;:null}}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding the nested column name in between &lt;code&gt;$&lt;/code&gt; signs would do the trick.&lt;/p&gt;

&lt;h4 id=&#34;3-3-3-validation&#34;&gt;3.3.3 Validation:&lt;/h4&gt;

&lt;p&gt;Sequelize supports adding validations to models. These validations would be trigged before saving.
Lets update our Todo model so name cannot be shorter than 2 and greater than 20.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sequelize.define(&#39;Todo&#39;, {
    name: { allowNull: false, type: DataTypes.STRING, validate:{len:[2,20]} },
    isCompleted: { type: DataTypes.BOOLEAN, defaultValue: false },
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the validate key on name does the trick.
Though validations are run before create,update and save, but not before bulkCreate.
So even with the validations in place, this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Model.Todo.bulkCreate([{name:&amp;quot;A&amp;quot;,CategoryId:1,UserId:1}])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would insert the record in Todos.
To enable validations, just specify &lt;code&gt;validate: true&lt;/code&gt; as options to bulkCreate,So&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Model.Todo.bulkCreate([{name:&amp;quot;A&amp;quot;,CategoryId:1,UserId:1}],{validate:true})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would raise an error&lt;/p&gt;

&lt;h4 id=&#34;3-3-4-having-clause&#34;&gt;3.3.4 having Clause:&lt;/h4&gt;

&lt;p&gt;Lets try finding the Todo&amp;rsquo;s having more than 2 tasks. A very simple SQL query for it can be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Select TodoId from Tasks group by TodoId having count(*) &amp;gt; 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sequelize does provide an option to add the having flag. We could simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Model.Task.findAll({group:[&#39;TodoId&#39;],attributes:[&#39;TodoId&#39;],having:[&#39;Count (*) &amp;gt; ?&#39;,2]})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-5-before-after-keys-in-migrations&#34;&gt;3.3.5 before/after keys in migrations:&lt;/h4&gt;

&lt;p&gt;While adding columns via migrations, the options object supports two flags before/after for ordering of columns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;queryInterface.addColumn(&#39;Todos&#39;, &#39;endDate&#39;,
  {
    type: Sequelize.DATE,
    allowNull: true,
    after:&#39;CategoryId
    //before: &#39;createdAt&#39; // Could use a before flag as well
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Column order do have a performance impact, especially in &lt;a href=&#34;https://stackoverflow.com/questions/894522/is-there-any-reason-to-worry-about-the-column-order-in-a-table&#34;&gt;mysql&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;5-gotcha-s&#34;&gt;5. Gotcha&amp;rsquo;s:&lt;/h3&gt;

&lt;h4 id=&#34;5-1-promise-bluebird&#34;&gt;5.1 Promise bluebird:&lt;/h4&gt;

&lt;p&gt;Sequelize provides lots of options for error handling, You can find them &lt;a href=&#34;https://sequelize.readthedocs.io/en/v3/api/errors/&#34;&gt;here&lt;/a&gt;. Lets work upon catching the validation errors, We will update the addTodo method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const addTodo = (UserId, CategoryId, todoName) =&amp;gt; {

  return Model.Todo.create({UserId, CategoryId, name:todoName})
  .catch(Model.Sequelize.ValidationError, (e)=&amp;gt; console.log(&amp;quot;Dude... Those fields ain&#39;t valid&amp;quot;,e))
  .catch((e)=&amp;gt; {console.log(&#39;Something else wrong here&#39;,e)})
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The catch block for Validation isn&amp;rsquo;t the standard JS catch block, Its a &lt;a href=&#34;http://bluebirdjs.com/docs/api/catch.html&#34;&gt;filtered catch block&lt;/a&gt; which bluebird provides, since sequelize return bluebird promises.&lt;/p&gt;

&lt;p&gt;Now this works all well, until we do something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Promise.all([Model.Todo.create({UserId:1,CategoryId:1,name:&amp;quot;A&amp;quot;})])
.catch(Model.Sequelize.ValidationError, (e)=&amp;gt; console.log(&amp;quot;Dude... Those fields ain&#39;t valid&amp;quot;,e))
.catch((e)=&amp;gt; {console.log(&#39;Something else wrong here&#39;,e)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pops out an error,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Something else wrong here TypeError: Cannot set property &#39;name&#39; of undefined
    at error.BaseError (/Users/shivambarsaley/Desktop/website/projects/Sequelize_The_Legendary_Way/node_modules/sequelize/lib/errors.js:22:24)
    at error.ValidationError (/Users/shivambarsaley/Desktop/website/projects/Sequelize_The_Legendary_Way/node_modules/sequelize/lib/errors.js:42:19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not something we were expecting, :thinking_face:
Since native JavaScript promises do not support filtered catch block, Upon a rejection, it ends in the first catch block and executes &lt;code&gt;Model.Sequelize.ValidationError&lt;/code&gt;
which again throws another error which which we see upon being caught in the last catch block.
We can solve this by using the standard catch block and instanceof operator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Promise.all([Model.Todo.create({UserId:1,CategoryId:1,name:&amp;quot;A&amp;quot;})])
.catch((e) =&amp;gt; {
  if(e instanceof Model.Sequelize.ValidationError){
    console.log(&#39;Yipee&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by using Promise from sequelize, like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Model.Sequelize.Promise.all([
  Model.Todo.create({UserId:1,CategoryId:1,name:&amp;quot;A&amp;quot;})
])
.catch(Model.Sequelize.ValidationError, (e)=&amp;gt; console.log(&amp;quot;Dude... Those fields ain&#39;t valid&amp;quot;,e))
.catch((e)=&amp;gt; {console.log(&#39;Something else wrong here&#39;,e)});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by using requiring bluebird.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const Promise = require(&#39;bluebird&#39;);
Promise.all([Model.Todo.create({UserId:1,CategoryId:1,name:&amp;quot;A&amp;quot;})])
.catch(Model.Sequelize.ValidationError, (e)=&amp;gt; console.log(&amp;quot;Dude... Those fields ain&#39;t valid&amp;quot;,e))
.catch((e)=&amp;gt; {console.log(&#39;Something else wrong here&#39;,e)});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;5-2-adding-foreign-keys&#34;&gt;5.2 Adding Foreign Keys:&lt;/h4&gt;

&lt;p&gt;If you are using a version of sequelize &amp;lt; 4.0. There is a high possibility you might run into &lt;a href=&#34;https://github.com/sequelize/sequelize/issues/7267&#34;&gt;this&lt;/a&gt; issue, just like I did. To start with you should upgrade to v4, and use the &lt;a href=&#34;http://docs.sequelizejs.com/manual/tutorial/migrations.html#addconstraint-tablename-attributes-options-&#34;&gt;addConstraint&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;Unfortunately, this wasn&amp;rsquo;t so easy for us. So sticking to Sequelize 3.x, There is an ugly way of using raw queries in migrations
So something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;queryInterface.sequelize.query(&#39;ALTER TABLE `Teachers` ADD CONSTRAINT Teachers_Subject_id FOREIGN KEY (SubjectId) REFERENCES Subjects(id);&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;post creating the SubjectId column.&lt;/p&gt;

&lt;h3 id=&#34;n-1-summarizing&#34;&gt;N-1. Summarizing:&lt;/h3&gt;

&lt;p&gt;Sequelize is an extensive and powerful ORM for NodeJs. Though I didn&amp;rsquo;t get a chance to work across other Javascript ORM&amp;rsquo;s but Sequelize does seem to have a leading edge against others.&lt;/p&gt;

&lt;p&gt;Would love to hear your comments and views about the post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>